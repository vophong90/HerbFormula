export function renderStep3(root) {
  fetch('./partials/step3.html')
    .then(res => res.text())
    .then(html => {
      root.innerHTML = html;
      populateStep3();

      document.getElementById("btn-back-step2").onclick = () => window.location.hash = "#/step2";
      document.getElementById("btn-save-next-step3").onclick = () => {
        saveStep3();
        window.location.hash = "#/step4";
      };

      document.getElementById("btn-auto-tree").onclick = autoGenerateDiagnosticTree;
      document.getElementById("btn-auto-classic").onclick = autoSuggestClassicSyndrome;
    });
}

// L·ªãch s·ª≠ h·ªôi ch·ª©ng c√°c l·∫ßn kh√°m tr∆∞·ªõc + n·∫°p l·∫°i field hi·ªán t·∫°i
function populateStep3() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const history = data.steps?.step2?.history || [];

  // L·ªãch s·ª≠ h·ªôi ch·ª©ng
  const ul = document.getElementById("past-syndrome-list");
  ul.innerHTML = "";
  history.forEach((entry, index) => {
    const label = entry?.syndrome?.final || entry?.syndrome?.model || "(Ch∆∞a ghi)";
    const li = document.createElement("li");
    li.textContent = `L·∫ßn ${index + 1} ‚Äì ${label}`;
    ul.appendChild(li);
  });

  // Field hi·ªán t·∫°i
  const current = data.steps?.step3 || {};
  document.getElementById("syndrome-model").value = current.model || "";
  document.getElementById("syndrome-classic").value = current.classic || "";
  document.getElementById("syndrome-final").value = current.final || "";
}

function saveStep3() {
  const model = document.getElementById("syndrome-model").value.trim();
  const classic = document.getElementById("syndrome-classic").value.trim();
  const final = document.getElementById("syndrome-final").value.trim();

  const key = localStorage.getItem("currentPatient");
  if (!key) return alert("Ch∆∞a ch·ªçn h·ªì s∆°!");

  const data = JSON.parse(localStorage.getItem(key) || "{}");
  data.steps = data.steps || {};
  data.steps.step3 = { model, classic, final };

  localStorage.setItem(key, JSON.stringify(data));
  localStorage.setItem("currentData", JSON.stringify(data));
}

async function autoSuggestClassicSyndrome() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const rawText = data.steps?.step1?.symptoms || "";
  const outputBox = document.getElementById("syndrome-classic");

  if (!rawText.trim()) {
    alert("‚ö†Ô∏è Ch∆∞a c√≥ m√¥ t·∫£ tri·ªáu ch·ª©ng ·ªü b∆∞·ªõc 1.");
    return;
  }

  outputBox.value = "‚è≥ ƒêang ph√¢n t√≠ch b·∫±ng GPT, vui l√≤ng ch·ªù...";

  const prompt = `
B·∫°n l√† chuy√™n gia Y h·ªçc c·ªï truy·ªÅn.

D∆∞·ªõi ƒë√¢y l√† m√¥ t·∫£ b·ªánh c·∫£nh c·ªßa m·ªôt b·ªánh nh√¢n, bao g·ªìm h·ªèi b·ªánh, tri·ªáu ch·ª©ng v√† d·∫•u hi·ªáu l√¢m s√†ng:

"""
${rawText}
"""

üéØ Y√äU C·∫¶U:

1. D·ª±a tr√™n m√¥ t·∫£ tr√™n, h√£y x√°c ƒë·ªãnh **h·ªôi ch·ª©ng Y h·ªçc c·ªï truy·ªÅn ph√π h·ª£p nh·∫•t** (c√≥ th·ªÉ l√† 1 ho·∫∑c nhi·ªÅu h·ªôi ch·ª©ng ph·ªëi h·ª£p).
2. V·ªõi m·ªói h·ªôi ch·ª©ng, n√™u t√™n h·ªôi ch·ª©ng v√† gi·∫£i th√≠ch ng·∫Øn g·ªçn l√Ω do ch·ªçn (tri·ªáu ch·ª©ng n√†o d·∫´n ƒë·∫øn h·ªôi ch·ª©ng ƒë√≥).
3. Tr√¨nh b√†y k·∫øt qu·∫£ nh∆∞ sau (ch·ªâ vƒÉn b·∫£n, kh√¥ng m√£ h√≥a, kh√¥ng JSON):

üìå H·ªôi ch·ª©ng: ...
üîç L√Ω do: ...
üìå H·ªôi ch·ª©ng: ...
üîç L√Ω do: ...

‚ùóKh√¥ng th√™m b·∫•t k·ª≥ ph·∫ßn m·ªü ƒë·∫ßu, l·ªùi gi·∫£i th√≠ch n√†o ngo√†i k·∫øt qu·∫£.
`.trim();

  try {
    const res = await fetch("https://gpt-api-19xu.onrender.com/gpt.php", {
      method: "POST",
      body: JSON.stringify({ prompt })
    });

    const gptJson = await res.json();
    const gptText = gptJson?.choices?.[0]?.message?.content || "";

    if (!gptText.trim()) {
      outputBox.value = "‚ö†Ô∏è GPT kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c h·ªôi ch·ª©ng ph√π h·ª£p.";
      return;
    }

    outputBox.value = gptText.trim();

    data.steps = data.steps || {};
    data.steps.step3 = {
      ...data.steps.step3,
      classic: gptText.trim()
    };
    localStorage.setItem("currentData", JSON.stringify(data));

  } catch (err) {
    outputBox.value = "‚ùå L·ªói khi g·ªçi GPT API.";
    console.error("‚ùå L·ªói khi g·ªçi GPT API:", err);
  }
}

async function autoGenerateDiagnosticTree() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const symptoms = data.steps?.step2?.symptoms || [];
  const rawSymptoms = data.steps?.step1?.symptoms || "";
  const outputBoxModel = document.getElementById("syndrome-model");

  if (!symptoms.length) {
    alert("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu VAS t·ª´ b∆∞·ªõc 2.");
    return;
  }
  if (outputBoxModel) outputBoxModel.value = "‚è≥ ƒêang ph√¢n t√≠ch, vui l√≤ng ch·ªù...";

  // S·∫Øp x·∫øp theo VAS gi·∫£m d·∫ßn
  const sorted = [...symptoms].sort((a, b) => b.vas - a.vas);
  const symptomList = sorted.map(s => `‚Äì ${s.symptom} (VAS: ${s.vas})`).join("\n");

  // Thu th·∫≠p tr·∫£ l·ªùi c√¢u h·ªèi ph·ª• n·∫øu c√≥
  const extraAnswers = collectExtraAnswers();
  let extraText = "";

  if (extraAnswers.length > 0) {
    extraText = "\n\nüî∂ **TH√îNG TIN B·ªî SUNG T·ª™ NG∆Ø·ªúI D√ôNG:**\n" +
      extraAnswers.map(e => `‚ñ´ ${e.question}: ${e.answer}`).join("\n");
  }

  // Prompt
  const basePrompt = `B·∫°n l√† m·ªôt b√°c sƒ© Y h·ªçc c·ªï truy·ªÅn c√≥ kinh nghi·ªám ch·∫©n ƒëo√°n b·ªánh theo bi·ªán ch·ª©ng lu·∫≠n tr·ªã.  
T√¥i s·∫Ω cung c·∫•p danh s√°ch c√°c tri·ªáu ch·ª©ng v√† ƒëi·ªÉm VAS (m·ª©c ƒë·ªô n·∫∑ng nh·∫π).  
H√£y l√†m theo c√°c b∆∞·ªõc sau ƒë·ªÉ x√¢y d·ª±ng s∆° ƒë·ªì bi·ªán ch·ª©ng 6 b∆∞·ªõc cho h·ªôi ch·ª©ng YHCT:

üî∂ **DANH S√ÅCH TRI·ªÜU CH·ª®NG V√Ä VAS:**  
${symptomList}
${rawSymptoms}
${extraText}
[...c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n chi ti·∫øt ƒë√£ c√≥ trong file index g·ªëc, n·∫øu mu·ªën copy ƒë·ªß, b·∫°n paste t·ª´ index g·ªëc v√†o ƒë√¢y!]
`;

  const res = await fetch("https://gpt-api-19xu.onrender.com/gpt.php", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ prompt: basePrompt })
  });

  const result = await res.json();
  const reply = result.choices?.[0]?.message?.content || "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ GPT.";

  // T√¨m c√°c followup questions (d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng ‚ñ´ ho·∫∑c ‚ùì)
  const followupQuestions = reply
    .split("\n")
    .filter(line => line.trim().startsWith("‚ñ´") || line.trim().startsWith("‚ùì"))
    .map(line => ({
      question: line.replace(/^(\‚ñ´|‚ùì)\s*/, "").trim()
    }));

  renderExtraQuestions(followupQuestions);
  localStorage.setItem("extraFollowupQuestions", JSON.stringify(followupQuestions));
  if (outputBoxModel) {
    outputBoxModel.value = reply;
  }
}

// Render c√°c c√¢u h·ªèi followup
function renderExtraQuestions(questions) {
  const container = document.getElementById("tree-extra-questions");
  container.innerHTML = "";
  if (!questions || !questions.length) return;

  questions.forEach((q, index) => {
    const wrapper = document.createElement("div");
    wrapper.className = "mb-3";

    const label = document.createElement("label");
    label.textContent = `‚ùì ${q.question}`;
    label.className = "block text-sm font-medium text-gray-700 mb-1";

    const input = document.createElement("input");
    input.type = "text";
    input.name = `extra-${index}`;
    input.className = "extra-question-input w-full border rounded px-3 py-1 focus:outline-none focus:ring focus:ring-blue-200";
    input.placeholder = "Nh·∫≠p c√¢u tr·∫£ l·ªùi...";

    wrapper.appendChild(label);
    wrapper.appendChild(input);
    container.appendChild(wrapper);
  });
}

// L·∫•y tr·∫£ l·ªùi c√°c c√¢u h·ªèi followup
function collectExtraAnswers() {
  const inputs = document.querySelectorAll(".extra-question-input");
  const answers = [];
  inputs.forEach((input, index) => {
    const questionLabel = input.previousElementSibling?.textContent || `C√¢u h·ªèi ${index + 1}`;
    const cleanQuestion = questionLabel.replace(/^‚ùì\s*/, "").trim();
    const answer = input.value.trim();
    if (answer) {
      answers.push({ question: cleanQuestion, answer });
    }
  });
  return answers;
}
