export function renderStep3(root) {
  root.innerHTML = `
    <h2 class="text-2xl font-semibold mb-4">${window.lang.step3.title}</h2>

    <!-- 🕘 Lịch sử hội chứng đã chẩn đoán -->
    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">${window.lang.step3.past_syndrome_title}</h3>
      <ul id="past-syndrome-list" class="list-disc list-inside text-gray-700 text-sm"></ul>
    </div>

    <!-- 🧪 Phân tích hội chứng hiện tại -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <div>
        <label class="font-semibold block mb-1">${window.lang.step3.approach_tree}</label>
        <button id="btn-auto-tree" class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">
          ${window.lang.step3.tree_btn}
        </button>
        <textarea id="syndrome-model" rows="3" class="w-full border rounded px-3 py-2" placeholder="${window.lang.step3.model_placeholder}"></textarea>
        <div id="tree-extra-questions" class="mt-4 space-y-3"></div>
      </div>
      <div>
        <label class="font-semibold block mb-1">${window.lang.step3.approach_gpt}</label>
        <button id="btn-auto-classic" class="bg-green-600 text-white px-4 py-2 rounded mt-2">
          ${window.lang.step3.gpt_btn}
        </button>
        <textarea id="syndrome-classic" rows="3" class="w-full border rounded px-3 py-2" placeholder="${window.lang.step3.classic_placeholder}"></textarea>
      </div>
      <div class="md:col-span-2">
        <label class="font-semibold block mb-1">${window.lang.step3.final_label}</label>
        <input id="syndrome-final" type="text" class="w-full border rounded px-3 py-2" placeholder="${window.lang.step3.final_placeholder}">
      </div>
    </div>

    <!-- Điều hướng -->
    <div class="flex justify-between">
      <button id="btn-back-step2" class="bg-gray-500 text-white px-4 py-2 rounded">${window.lang.step3.back}</button>
      <button id="btn-save-next-step3" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">${window.lang.step3.next}</button>
    </div>
  `;

  populateStep3();

  document.getElementById("btn-back-step2").onclick = () => window.location.hash = "#/step2";
  document.getElementById("btn-save-next-step3").onclick = () => {
    saveStep3();
    window.location.hash = "#/step4";
  };

  document.getElementById("btn-auto-tree").onclick = autoGenerateDiagnosticTree;
  document.getElementById("btn-auto-classic").onclick = autoSuggestClassicSyndrome;
}

// ---------- LOGIC GỐC ----------

function populateStep3() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const history = data.steps?.step2?.history || [];

  // Lịch sử hội chứng
  const ul = document.getElementById("past-syndrome-list");
  ul.innerHTML = "";
  history.forEach((entry, index) => {
    const label = entry?.syndrome?.final || entry?.syndrome?.model || window.lang.step3.no_record;
    const li = document.createElement("li");
    li.textContent = `${window.lang.step3.time_label.replace("{n}", index + 1)} – ${label}`;
    ul.appendChild(li);
  });

  // Field hiện tại
  const current = data.steps?.step3 || {};
  document.getElementById("syndrome-model").value = current.model || "";
  document.getElementById("syndrome-classic").value = current.classic || "";
  document.getElementById("syndrome-final").value = current.final || "";
}

function saveStep3() {
  const model = document.getElementById("syndrome-model").value.trim();
  const classic = document.getElementById("syndrome-classic").value.trim();
  const final = document.getElementById("syndrome-final").value.trim();

  const key = localStorage.getItem("currentPatient");
  if (!key) return alert(window.lang.step3.alert_no_profile || "Chưa chọn hồ sơ!");

  const data = JSON.parse(localStorage.getItem(key) || "{}");
  data.steps = data.steps || {};
  data.steps.step3 = { model, classic, final };

  localStorage.setItem(key, JSON.stringify(data));
  localStorage.setItem("currentData", JSON.stringify(data));
}

async function autoSuggestClassicSyndrome() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const rawText = data.steps?.step1?.symptoms || "";
  const outputBox = document.getElementById("syndrome-classic");

  if (!rawText.trim()) {
    alert("⚠️ Chưa có mô tả triệu chứng ở bước 1.");
    return;
  }

  outputBox.value = "⏳ Đang phân tích bằng GPT, vui lòng chờ...";

  const prompt = `
Bạn là chuyên gia Y học cổ truyền.

Dưới đây là mô tả bệnh cảnh của một bệnh nhân, bao gồm hỏi bệnh, triệu chứng và dấu hiệu lâm sàng:

"""
${rawText}
"""

🎯 YÊU CẦU:

1. Dựa trên mô tả trên, hãy xác định **hội chứng Y học cổ truyền phù hợp nhất** (có thể là 1 hoặc nhiều hội chứng phối hợp).
2. Với mỗi hội chứng, nêu tên hội chứng và giải thích ngắn gọn lý do chọn (triệu chứng nào dẫn đến hội chứng đó).
3. Trình bày kết quả như sau (chỉ văn bản, không mã hóa, không JSON):

📌 Hội chứng: ...
🔍 Lý do: ...
📌 Hội chứng: ...
🔍 Lý do: ...

❗Không thêm bất kỳ phần mở đầu, lời giải thích nào ngoài kết quả.
`.trim();

  try {
    const res = await fetch("https://gpt-api-19xu.onrender.com/gpt.php", {
      method: "POST",
      body: JSON.stringify({ prompt })
    });

    const gptJson = await res.json();
    const gptText = gptJson?.choices?.[0]?.message?.content || "";

    if (!gptText.trim()) {
      outputBox.value = "⚠️ GPT không xác định được hội chứng phù hợp.";
      return;
    }

    outputBox.value = gptText.trim();

    data.steps = data.steps || {};
    data.steps.step3 = {
      ...data.steps.step3,
      classic: gptText.trim()
    };
    localStorage.setItem("currentData", JSON.stringify(data));

  } catch (err) {
    outputBox.value = "❌ Lỗi khi gọi GPT API.";
    console.error("❌ Lỗi khi gọi GPT API:", err);
  }
}

async function autoGenerateDiagnosticTree() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const symptoms = data.steps?.step2?.symptoms || [];
  const rawSymptoms = data.steps?.step1?.symptoms || "";
  const outputBoxModel = document.getElementById("syndrome-model");

  if (!symptoms.length) {
    alert("⚠️ Chưa có dữ liệu VAS từ bước 2.");
    return;
  }
  if (outputBoxModel) outputBoxModel.value = "⏳ Đang phân tích, vui lòng chờ...";

  // 1. Lấy danh sách triệu chứng + VAS, sắp xếp giảm dần
  const sorted = [...symptoms].sort((a, b) => b.vas - a.vas);
  const symptomList = sorted.map(s => `– ${s.symptom} (VAS: ${s.vas})`).join("\n");

  // 2. Thu thập thông tin bổ sung nếu có
  const extraAnswers = collectExtraAnswers();
  let extraText = "";

  if (extraAnswers.length > 0) {
    extraText = "\n\n🔶 **THÔNG TIN BỔ SUNG TỪ NGƯỜI DÙNG:**\n" +
                extraAnswers.map(e => `▫ ${e.question}: ${e.answer}`).join("\n");
  }

  // 3. Prompt chính
  const basePrompt = `Bạn là một bác sĩ Y học cổ truyền có kinh nghiệm chẩn đoán bệnh theo biện chứng luận trị.  
Tôi sẽ cung cấp danh sách các triệu chứng và điểm VAS (mức độ nặng nhẹ).  
Hãy làm theo các bước sau để xây dựng sơ đồ biện chứng 6 bước cho hội chứng YHCT:

🔶 **BƯỚC 1: Xác định chủ chứng**  
– Hãy lấy triệu chứng có VAS cao nhất làm chủ chứng.  
– Cho biết chủ chứng đó là cấp, mạn, hay cấp trên nền mạn?  
– Nếu thiếu thông tin, hãy hỏi rõ:  
  ▫ Chủ chứng xuất hiện gần đây hay đã lâu?  
  ▫ Trước đây đã từng có triệu chứng này chưa?  

🔶 **BƯỚC 2: Phân biệt Hư – Thực của chủ chứng**  
– Dựa trên:  
  ▫ Hoàn cảnh khởi phát: đột ngột (thực), từ từ (hư)  
  ▫ Mức độ: dữ dội (thực), âm ỉ (hư)  
  ▫ Thời gian: vài ngày (thực), nhiều tuần/tháng (hư)  
  ▫ Mạch: hồng, trường, khẩn, hoạt, sáp, đại, hữu lực (thực) / tế, vi, nhược, vô lực (hư)  
  ▫ Lưỡi: lưỡi đỏ tươi, lưỡi tím, lưỡi chắc, lưỡi thon, rêu dày (thực) / lưỡi bệu, lưỡi có dấu ấn răng, lưỡi nhạt, hình thể teo, ít rêu, rêu bong tróc (hư)  
– Nếu còn thiếu dữ kiện, hãy đặt từng câu hỏi cụ thể cho người dùng.

🔶 **BƯỚC 3: Xác định nhóm bệnh nguyên**

**Nếu là THỰC:**
– **Lục dâm**: có biểu hiện ngoại cảm như sợ gió, sợ lạnh, đau mỏi thân mình hoặc có dấu hiệu đặc trưng phong, hàn, thử, thấp, táo, hỏa  
– **Khí uất**: triệu chứng tăng khi uất ức, giảm khi thư giãn, nếu đau thì đau kiểu căng trướng tức, nếu là hòn khối thì lúc có lúc không  
– **Huyết ứ**: đau cố định, tăng về đêm, lưỡi tím, có ban ứ, tĩnh mạch dưới lưỡi nổi, nếu có xuất huyết thì có máu cục bầm đen, nếu sờ có khối u thì khối u đó cứng chắc  
– **Hỏa uất**: triệu chứng kèm nóng rát, diễn tiến nhanh, dữ dội, vùng tổn thương sẽ có màu đỏ, sờ nóng, có thể có lở loét, mụn nhọt có mủ  
– **Đàm thấp**: triệu chứng nặng nề, bài tiết ra cách chất tiết đục, dơ, mùi tanh hôi  

**Nếu là HƯ:**
– **Khí hư**: triệu chứng lúc có lúc không, nặng lên khi gắng sức, biếng nói, lười vận động, tay chân không có sức, thở ngắn, nói ngắt quãng  
– **Huyết hư**: triệu chứng liên tục, vùng bị ảnh hưởng có biểu hiện thiếu nuôi dưỡng như da niêm nhợt và khô, lông thưa, cơ nhục teo, gân co rút co cứng, khớp khó co duỗi 
– **Tinh bất túc**: người gầy, lưng gối mỏi, giảm trí nhớ, biểu hiện suy giảm công năng cuả tủy, não  

→ Dựa vào dữ kiện đã có, hãy chọn nhóm phù hợp và giải thích lý do. Nếu thiếu, hỏi cụ thể.

🔶 **BƯỚC 4: Xác định tạng phủ hoặc kinh lạc liên quan**  
– Dựa vào triệu chứng còn lại để gợi ý tạng phủ hoặc đường kinh đang bị tổn thương.

🔶 **BƯỚC 5: Xem xét tính hợp lý về thứ tự thời gian xuất hiện triệu chứng**  
– Dựa vào đặc điểm về thời gian xuất hiện các triệu chứng trong mô tả kèm theo, hãy xem xét đến tính hợp lý về mặt thứ tự xuất hiện các triệu chứng theo thời gian, để xem liệu rằng thứ tự đó có hợp lý theo lý luận y học cổ truyền hay không. Ví dụ: các triệu chứng của Can hỏa thượng viêm phải xuất hiện sau triệu chứng của Can khí uất kết, vì Can khí uất kết là nguyên nhân gây ra Can hỏa thượng viêm.
– Nếu còn thiếu dữ kiện, hãy đặt từng câu hỏi cụ thể cho người dùng là yêu cầu người dùng sắp xếp thứ tự triệu chứng mà bạn cần theo thời gian xuất hiện từ quá khứ đến hiện tại.

🔶 **BƯỚC 6: Giải thích các triệu chứng còn lại**  
– Sau khi có chẩn đoán hội chứng ở bước 4, hãy dùng hội chứng đó để kiểm tra xem còn triệu chứng nào của bệnh nhân đã được mô tả mà không thể được giải thích một cách hợp lý bởi hội chứng đó không? Nếu có, hãy lấy triệu chứng đó làm chủ chứng thứ 2 để lặp lại quy trình chẩn đoán từ bước 1 đến bước 5. Cứ làm vòng lặp như vậy cho đến khi tất cả triệu chứng đều có chẩn đoán hợp lý.
– Nếu còn thiếu dữ kiện, hãy đặt từng câu hỏi cụ thể cho người dùng để cung cấp thêm thông tin cho biện luận chẩn đoán hội chứng.

🔷 **DANH SÁCH TRIỆU CHỨNG VÀ VAS:**  
${symptomList}
${rawSymptoms}
${extraText}`; // 👈 Gộp phần bổ sung

  // 4. Gửi GPT
const res = await fetch("https://gpt-api-19xu.onrender.com/gpt.php", {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify({ prompt: basePrompt })
});

  const result = await res.json();
  const reply = result.choices?.[0]?.message?.content || "Không nhận được phản hồi từ GPT.";
  const followupQuestions = reply
  .split("\n")
  .filter(line => line.trim().startsWith("▫") || line.trim().startsWith("❓"))
  .map(line => ({
    question: line.replace(/^(\▫|❓)\s*/, "").trim()
  }));

  renderExtraQuestions(followupQuestions);
  localStorage.setItem("extraFollowupQuestions", JSON.stringify(followupQuestions));
  const outputBox = document.getElementById("syndrome-model");
  if (outputBox) {
    outputBox.value = reply;
  } else {
    alert("❌ Không tìm thấy ô hiển thị kết quả (syndrome-model).");
  }
}

// Render các câu hỏi followup
function renderExtraQuestions(questions) {
  const container = document.getElementById("tree-extra-questions");
  container.innerHTML = "";
  if (!questions || !questions.length) return;

  questions.forEach((q, index) => {
    const wrapper = document.createElement("div");
    wrapper.className = "mb-3";

    const label = document.createElement("label");
    label.textContent = `❓ ${q.question}`;
    label.className = "block text-sm font-medium text-gray-700 mb-1";

    const input = document.createElement("input");
    input.type = "text";
    input.name = `extra-${index}`;
    input.className = "extra-question-input w-full border rounded px-3 py-1 focus:outline-none focus:ring focus:ring-blue-200";
    input.placeholder = "Nhập câu trả lời...";

    wrapper.appendChild(label);
    wrapper.appendChild(input);
    container.appendChild(wrapper);
  });
}

// Lấy trả lời các câu hỏi followup
function collectExtraAnswers() {
  const inputs = document.querySelectorAll(".extra-question-input");
  const answers = [];
  inputs.forEach((input, index) => {
    const questionLabel = input.previousElementSibling?.textContent || `Câu hỏi ${index + 1}`;
    const cleanQuestion = questionLabel.replace(/^❓\s*/, "").trim();
    const answer = input.value.trim();
    if (answer) {
      answers.push({ question: cleanQuestion, answer });
    }
  });
  return answers;
}
