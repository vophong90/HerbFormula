import { appState, saveState } from "../state.js";

/** ====== C·∫§U H√åNH API (n·∫øu mu·ªën g·ªçi GPT c·ªßa b·∫°n) ====== */
const API_BASE = "https://gpt-api-19xu.onrender.com"; // ‚Üê s·ª≠a n·∫øu c·∫ßn
// V√≠ d·ª•: n·∫øu b·∫°n c√≥ endpoint PHP c≈©: `${API_BASE}/gpt.php`
// Ho·∫∑c endpoint JSON m·ªõi: `${API_BASE}/classic-syndrome`
async function callGPTSuggest(symptomsText) {
  // TODO: s·ª≠a cho kh·ªõp API c·ªßa b·∫°n. D∆∞·ªõi ƒë√¢y l√† 2 v√≠ d·ª• ‚Äî b·ªè c√°i b·∫°n kh√¥ng d√πng:

  // --- V√≠ d·ª• A: API JSON POST hi·ªán ƒë·∫°i ---
  try {
    const res = await fetch(`${API_BASE}/classic-syndrome`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        symptoms: symptomsText.split(/\r?\n/).map(s => s.trim()).filter(Boolean),
        max: 5,
        lang: "vi"
      }),
    });
    if (res.ok) return await res.json(); // k·ª≥ v·ªçng: { items: [ { name, notes? }, ... ] }
  } catch (e) {
    // ignore ƒë·ªÉ th·ª≠ ph∆∞∆°ng √°n B
  }

  // --- V√≠ d·ª• B: API PHP c≈© (form-urlencoded) ---
  try {
    const form = new URLSearchParams();
    form.set("action", "suggest_classic_syndrome");
    form.set("symptoms", symptomsText);

    const res = await fetch(`${API_BASE}/gpt.php`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: form.toString(),
    });
    if (res.ok) {
      // tu·ª≥ API c·ªßa b·∫°n tr·∫£ g√¨: JSON ho·∫∑c text d·∫°ng danh s√°ch
      const text = await res.text();
      // c·ªë g·∫Øng parse JSON; n·∫øu kh√¥ng ƒë∆∞·ª£c, t√°ch d√≤ng
      try {
        return JSON.parse(text);
      } catch {
        const items = text.split(/\r?\n/).map(s => s.trim()).filter(Boolean).slice(0, 5);
        return { items: items.map(x => ({ name: x })) };
      }
    }
  } catch (e) {
    // fall through
  }

  // --- Fallback m·∫´u (kh√¥ng c·∫ßn API, ƒë·ªÉ kh√¥ng v·ª° app) ---
  return {
    items: [
      { name: "Can kh√≠ u·∫•t", notes: "ƒêau t·ª©c ng·ª±c s∆∞·ªùn, ·ª£ h∆°i, d·ªÖ c√°u, l∆∞·ª°i h·ªìng, r√™u m·ªèng." },
      { name: "T·ª≥ h∆∞ th·∫•p tr·ªá", notes: "ƒÇn k√©m, b·ª•ng ƒë·∫ßy, m·ªát, ƒë·∫°i ti·ªán l·ªèng, l∆∞·ª°i nh·∫°t, r√™u tr·∫Øng nh·ªùn." },
      { name: "V·ªã kh√≠ b·∫•t h√≤a", notes: "·ª¢ chua, bu·ªìn n√¥n, ƒë·∫ßy tr∆∞·ªõng v√πng th∆∞·ª£ng v·ªã." },
    ]
  };
}

/** ====== TI·ªÜN √çCH CHUNG ====== */
async function loadPartial(path) {
  const res = await fetch(path);
  return await res.text();
}
function ensureStep3() {
  appState.steps ||= {};
  appState.steps.step3 ||= {
    selectedSyndrome: "",
    suggestions: [],       // [{ name, notes? }]
    extraQuestions: [],    // [{ id, text, type: 'yesno'|'text'|'number', value }]
    tree: "",              // m√¥ t·∫£ c√¢y ƒë∆°n gi·∫£n
  };
  return appState.steps.step3;
}
function getStep1SymptomsText() {
  return (appState.steps?.step1?.symptoms || "").trim();
}

/** ====== RENDER CH√çNH ====== */
export async function renderStep3(root) {
  root.innerHTML = await loadPartial("/partials/step3.html");

  // ƒêi·ªÅn tri·ªáu ch·ª©ng t·ª´ B∆∞·ªõc 1
  const $sym = document.getElementById("b3-symptoms");
  $sym.value = getStep1SymptomsText();

  // Kh·ªüi t·∫°o UI theo state
  const st3 = ensureStep3();
  document.getElementById("b3-selected-syndrome").value = st3.selectedSyndrome || "";
  renderSuggestList(st3.suggestions);
  renderQuestions(st3.extraQuestions);
  renderTree(st3.tree);

  // Wire buttons
  document.getElementById("b3-btn-suggest").onclick = onSuggestClick;
  document.getElementById("b3-btn-clear-suggest").onclick = () => {
    const st = ensureStep3();
    st.suggestions = [];
    saveState();
    renderSuggestList(st.suggestions);
  };

  document.getElementById("b3-btn-gen-questions").onclick = onGenerateQuestions;
  document.getElementById("b3-btn-clear-questions").onclick = () => {
    const st = ensureStep3();
    st.extraQuestions = [];
    saveState();
    renderQuestions(st.extraQuestions);
  };

  document.getElementById("b3-btn-back2").onclick = () => (location.hash = "#/step2");
  document.getElementById("b3-btn-save").onclick = onSave;
  document.getElementById("b3-btn-next4").onclick = () => {
    onSave();
    location.hash = "#/step4";
  };

  // L∆∞u thay ƒë·ªïi √¥ nh·∫≠p h·ªôi ch·ª©ng
  document.getElementById("b3-selected-syndrome").addEventListener("input", (e) => {
    const st = ensureStep3();
    st.selectedSyndrome = e.target.value;
    saveState();
  });
}

/** ====== H√ÄM: G·ª£i √Ω h·ªôi ch·ª©ng ====== */
async function onSuggestClick() {
  const text = getStep1SymptomsText();
  if (!text) return alert("Ch∆∞a c√≥ tri·ªáu ch·ª©ng ·ªü B∆∞·ªõc 1.");

  const btn = document.getElementById("b3-btn-suggest");
  btn.disabled = true; btn.textContent = "ƒêang g·ª£i √Ω‚Ä¶";
  try {
    const data = await callGPTSuggest(text); // { items: [{name, notes?}, ...] }
    const items = (data?.items || [])
      .filter(x => x?.name)
      .map(x => ({ name: String(x.name), notes: x.notes ? String(x.notes) : "" }))
      .slice(0, 5);

    const st = ensureStep3();
    st.suggestions = items;
    // N·∫øu ch∆∞a c√≥ h·ªôi ch·ª©ng ƒëang x√©t ‚Üí ch·ªçn m·ª•c ƒë·∫ßu ti√™n
    if (!st.selectedSyndrome && items[0]) st.selectedSyndrome = items[0].name;
    saveState();

    renderSuggestList(items);
    // c·∫≠p nh·∫≠t √¥ nh·∫≠p
    document.getElementById("b3-selected-syndrome").value = st.selectedSyndrome || "";
  } catch (e) {
    alert("Kh√¥ng g·ª£i √Ω ƒë∆∞·ª£c (API l·ªói). ƒê√£ d√πng d·ªØ li·ªáu m·∫´u ƒë·ªÉ tr√°nh v·ª° app.");
  } finally {
    btn.disabled = false; btn.textContent = "ü§ñ GPT g·ª£i √Ω";
  }
}

function renderSuggestList(items) {
  const box = document.getElementById("b3-suggest-list");
  if (!items?.length) {
    box.innerHTML = `<div class="text-gray-500">Ch∆∞a c√≥ g·ª£i √Ω. Nh·∫•n ‚ÄúGPT g·ª£i √Ω‚Äù.</div>`;
    return;
  }
  box.innerHTML = "";
  items.forEach((it, idx) => {
    const card = document.createElement("div");
    card.className = "border rounded p-3 bg-white";
    card.innerHTML = `
      <div class="flex items-start justify-between gap-3">
        <div>
          <div class="font-medium">#${idx + 1}. ${escapeHTML(it.name)}</div>
          ${it.notes ? `<div class="text-sm text-gray-600 mt-1">${escapeHTML(it.notes)}</div>` : ""}
        </div>
        <button class="b3-pick bg-blue-600 text-white px-3 py-1 rounded" data-name="${escapeAttr(it.name)}">Ch·ªçn</button>
      </div>
    `;
    card.querySelector(".b3-pick").onclick = (e) => {
      const name = e.currentTarget.getAttribute("data-name");
      const st = ensureStep3();
      st.selectedSyndrome = name;
      saveState();
      document.getElementById("b3-selected-syndrome").value = name;
    };
    box.appendChild(card);
  });
}

/** ====== H√ÄM: Sinh c√¢u h·ªèi b·ªï sung t·ª´ h·ªôi ch·ª©ng ƒëang x√©t ====== */
function onGenerateQuestions() {
  const st = ensureStep3();
  const name = (st.selectedSyndrome || "").trim();
  if (!name) return alert("Ch∆∞a ch·ªçn h·ªôi ch·ª©ng ƒëang x√©t.");

  // ·ªû ƒë√¢y m√¨nh t·∫°o m·∫´u c√¢u h·ªèi d·ª±a tr√™n t√™n h·ªôi ch·ª©ng.
  // B·∫°n c√≥ th·ªÉ thay b·∫±ng g·ªçi API ƒë·ªÉ sinh c√¢u h·ªèi chi ti·∫øt.
  const base = [
    { id: "pain_site", text: "V·ªã tr√≠/t·∫°ng ph·ªß li√™n quan c√≥ bi·ªÉu hi·ªán ƒë·∫∑c tr∆∞ng kh√¥ng?", type: "text", value: "" },
    { id: "heat_cold", text: "C·∫£m gi√°c h√†n/nhi·ªát, s·ª£ l·∫°nh hay n√≥ng?", type: "text", value: "" },
    { id: "tongue", text: "L∆∞·ª°i (m√†u/r√™u) ph√π h·ª£p v·ªõi h·ªôi ch·ª©ng?", type: "text", value: "" },
    { id: "pulse", text: "M·∫°ch t∆∞·ª£ng g·ª£i √Ω g√¨?", type: "text", value: "" },
    { id: "course", text: "Di·ªÖn ti·∫øn (ph√°t t√°c/k√©o d√†i/lui b·ªánh)?", type: "text", value: "" },
  ];

  // N·∫øu l√† "Can kh√≠ u·∫•t" th√™m 1 yes/no minh ho·∫°
  if (/can\s*kh√≠\s*u·∫•t/i.test(name)) {
    base.unshift({ id: "irritability", text: "D·ªÖ c√°u g·∫Øt, u·∫•t ·ª©c?", type: "yesno", value: null });
  }

  st.extraQuestions = base;
  saveState();
  renderQuestions(st.extraQuestions);
  buildSimpleTree(); // c·∫≠p nh·∫≠t preview c√¢y ch·∫©n ƒëo√°n
}

function renderQuestions(items) {
  const box = document.getElementById("b3-questions");
  if (!items?.length) {
    box.innerHTML = `<div class="text-gray-500">Ch∆∞a c√≥ c√¢u h·ªèi. Nh·∫•n ‚ÄúSinh c√¢u h·ªèi b·ªï sung‚Äù.</div>`;
    return;
  }
  box.innerHTML = "";

  items.forEach((q, idx) => {
    const wrap = document.createElement("div");
    wrap.className = "bg-white border rounded p-3";
    wrap.innerHTML = `
      <div class="font-medium mb-1">Q${idx + 1}. ${escapeHTML(q.text)}</div>
      <div>${renderInputHTML(q, idx)}</div>
    `;
    // g·∫Øn s·ª± ki·ªán c·∫≠p nh·∫≠t gi√° tr·ªã
    attachInputHandler(wrap, q, idx);
    box.appendChild(wrap);
  });
}

function renderInputHTML(q, idx) {
  if (q.type === "yesno") {
    const v = q.value === true ? "yes" : q.value === false ? "no" : "";
    return `
      <select data-idx="${idx}" class="border rounded px-2 py-1">
        <option value="">-- ch·ªçn --</option>
        <option value="yes" ${v==="yes"?"selected":""}>C√≥</option>
        <option value="no"  ${v==="no" ?"selected":""}>Kh√¥ng</option>
      </select>
    `;
  }
  if (q.type === "number") {
    return `<input data-idx="${idx}" type="number" class="border rounded px-2 py-1" value="${q.value ?? ""}">`;
  }
  // text m·∫∑c ƒë·ªãnh
  return `<input data-idx="${idx}" type="text" class="border rounded px-2 py-1 w-full" value="${escapeAttr(q.value ?? "")}">`;
}

function attachInputHandler(container, q, idx) {
  const el = container.querySelector("[data-idx]");
  if (!el) return;
  el.addEventListener("input", (e) => {
    const st = ensureStep3();
    if (q.type === "yesno") {
      st.extraQuestions[idx].value = e.target.value === "yes" ? true : e.target.value === "no" ? false : null;
    } else if (q.type === "number") {
      st.extraQuestions[idx].value = e.target.value === "" ? null : Number(e.target.value);
    } else {
      st.extraQuestions[idx].value = e.target.value;
    }
    saveState();
    buildSimpleTree(); // c·∫≠p nh·∫≠t preview c√¢y
  });
}

/** ====== H√ÄM: T·∫°o "c√¢y ch·∫©n ƒëo√°n" ƒë∆°n gi·∫£n ƒë·ªÉ preview ====== */
function buildSimpleTree() {
  const st3 = ensureStep3();
  const lines = [];
  lines.push(`H·ªôi ch·ª©ng: ${st3.selectedSyndrome || "(ch∆∞a ch·ªçn)"}`);
  (st3.extraQuestions || []).forEach((q, i) => {
    const v = q.type === "yesno"
      ? (q.value === true ? "C√≥" : q.value === false ? "Kh√¥ng" : "(ch∆∞a tr·∫£ l·ªùi)")
      : (q.value ?? "(ch∆∞a tr·∫£ l·ªùi)");
    lines.push(`- Q${i + 1}: ${q.text} ‚Üí ${v}`);
  });
  st3.tree = lines.join("\n");
  saveState();
  renderTree(st3.tree);
}

function renderTree(text) {
  document.getElementById("b3-tree").textContent = text || "‚Äî";
}

/** ====== L∆ØU & HELPERS ====== */
function onSave() {
  // d·ªØ li·ªáu ƒë√£ ƒë·ªìng b·ªô li√™n t·ª•c v√†o appState; nh·∫•n L∆∞u ƒë·ªÉ x√°c nh·∫≠n
  saveState();
  alert("‚úÖ ƒê√£ l∆∞u B∆∞·ªõc 3.");
}

function escapeHTML(s) {
  return String(s).replace(/[&<>"']/g, (m) => (
    { "&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#039;" }[m]
  ));
}
function escapeAttr(s) {
  return escapeHTML(s).replace(/"/g, "&quot;");
}
