// step4.js: ƒê√∫ng logic g·ªëc, kh√¥ng module h√≥a, thao t√°c tr·ª±c ti·∫øp v·ªõi localStorage, id field gi·ªØ nguy√™n

export function renderStep4() {
  fetch('./partials/step4.html')
    .then(res => res.text())
    .then(html => {
      document.getElementById('main-content').innerHTML = html;
      populateStep4();
    });
}

// H√†m g·ªëc l·∫•y t·ª´ index.html
function populateStep4() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");

  // H·ªôi ch·ª©ng t·ª´ b∆∞·ªõc 3
  const syndrome = data.steps?.step3?.final || "(ch∆∞a x√°c ƒë·ªãnh)";
  const syndromeDiv = document.getElementById("confirmed-syndrome");
  if (syndromeDiv) syndromeDiv.textContent = syndrome;

  // Tri·ªáu ch·ª©ng n·ªïi b·∫≠t
  const symptoms = data.steps?.step2?.symptoms || [];
  const sorted = [...symptoms].sort((a, b) => b.vas - a.vas);
  const topSymptoms = sorted.slice(0, 5);

  const ul = document.getElementById("step4-top-symptom-list");
  if (ul) {
    ul.innerHTML = "";
    topSymptoms.forEach(s => {
      const li = document.createElement("li");
      li.textContent = `${s.symptom} (VAS ${s.vas})`;
      ul.appendChild(li);
    });
  }

  // N·∫°p d·ªØ li·ªáu c√°c √¥ ƒë√£ c√≥
  const step4 = data.steps?.step4 || {};
  const sixs = step4.sixs || {};

  const fields = [
    ["final-gpt-formula", step4.finalGPT],
    ["final-doctor-formula", step4.finalDoctor],
    ["sixs-source", sixs.source],
    ["sixs-symptom", sixs.symptom],
    ["sixs-site", sixs.site],
    ["sixs-strength", sixs.strength],
    ["sixs-sideeffect", sixs.sideeffect],
    ["sixs-secondary", sixs.secondary]
  ];

  fields.forEach(([id, value]) => {
    const el = document.getElementById(id);
    if (el) el.value = value || "";
  });

  setupHerbBarChartUI();
}

// G·ª£i √Ω ph√°p tr·ªã YHCT
window.autoSuggestMethod = async function() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  const syndrome = data.steps?.step3?.final?.trim();
  const symptoms = data.steps?.step2?.symptoms || [];
  const outputBox = document.getElementById("treatmethod-gpt");

  if (!syndrome || symptoms.length === 0) {
    outputBox.value = "‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu h·ªôi ch·ª©ng ho·∫∑c tri·ªáu ch·ª©ng.";
    return;
  }

  outputBox.value = "‚è≥ ƒêang g·ª£i √Ω ph√°p tr·ªã, vui l√≤ng ch·ªù...";

  const symptomList = symptoms
    .sort((a, b) => b.vas - a.vas)
    .map((s, i) => `${i + 1}. ${s.symptom} (VAS: ${s.vas})`)
    .join("\n");

  const prompt = `
B·∫°n l√† chuy√™n gia Y h·ªçc c·ªï truy·ªÅn.

B·ªánh nh√¢n ƒë∆∞·ª£c ch·∫©n ƒëo√°n theo YHCT l√†: **${syndrome}**

Danh s√°ch c√°c tri·ªáu ch·ª©ng ƒë√£ ghi nh·∫≠n, s·∫Øp x·∫øp theo m·ª©c ƒë·ªô VAS:

${symptomList}

D·ª±a tr√™n ch·∫©n ƒëo√°n v√† tri·ªáu ch·ª©ng, h√£y x√°c ƒë·ªãnh c√°c ph√°p tr·ªã ph√π h·ª£p theo nguy√™n t·∫Øc bi·ªán ch·ª©ng lu·∫≠n tr·ªã. Ph√°p tr·ªã c·∫ßn chia l√†m hai nh√≥m r√µ r√†ng:

üîπ **Tr·ªã b·∫£n** (nh·∫±m ƒëi·ªÅu tr·ªã c∆° ch·∫ø sinh b·ªánh, g·ªëc r·ªÖ b·ªánh theo l√Ω lu·∫≠n t·∫°ng ph·ªß, kh√≠ huy·∫øt, t√† ch√≠nh, h∆∞ th·ª±c...).

üîπ **Tr·ªã ti√™u** (nh·∫±m ƒëi·ªÅu tr·ªã tri·ªáu ch·ª©ng hi·ªán t·∫°i ƒëang g√¢y kh√≥ ch·ªãu nhi·ªÅu nh·∫•t).

Y√™u c·∫ßu:
- Ch·ªâ ch·ªçn trong c√°c ph√°p tr·ªã chu·∫©n c·ªßa Trung y, kh√¥ng ƒë∆∞·ª£c s√°ng t·∫°o.
- ∆Øu ti√™n tr√¨nh b√†y b·∫±ng thu·∫≠t ng·ªØ H√°n Vi·ªát.
- Kh√¥ng vi·∫øt th·ª´a, kh√¥ng lan man.

Tr√¨nh b√†y k·∫øt qu·∫£ nh∆∞ sau:

üî∏ **Tr·ªã b·∫£n:**  
‚Äì Ph√°p tr·ªã: ...  
‚Äì L√Ω do ch·ªçn ph√°p tr·ªã: ...

üî∏ **Tr·ªã ti√™u:**  
‚Äì Ph√°p tr·ªã: ...  
‚Äì L√Ω do ch·ªçn ph√°p tr·ªã: ...
`;

  const res = await fetch("https://gpt-api-19xu.onrender.com/gpt.php", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ prompt: prompt })
  });

  const result = await res.json();
  const reply = result.choices?.[0]?.message?.content || "‚ùå GPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£.";

  outputBox.value = reply;
}

// Tra c·ª©u ƒë·ªëi d∆∞·ª£c
window.searchDoiDuocByKeyword = function() {
  const input = document.getElementById("keyword-doiduoc");
  const keyword = input.value.trim().toLowerCase();
  const resultBox = document.getElementById("result-doiduoc");

  if (!keyword) {
    resultBox.value = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a.";
    return;
  }

  const keywords = keyword.split(/\s+/).filter(k => k);

  const matches = (window.doiDuocData || []).filter(item => {
    const chutriText = item.chutri?.toLowerCase() || "";
    return keywords.every(word => chutriText.includes(word));
  });

  if (matches.length === 0) {
    resultBox.value = "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.";
    return;
  }

  resultBox.value = matches.map(item =>
    `üìå ƒê·ªëi d∆∞·ª£c: ${item.doiduoc}\nüìã Ch·ªß tr·ªã: ${item.chutri}`
  ).join("\n\n");
}

// V·∫Ω bi·ªÉu ƒë·ªì v·ªã thu·ªëc theo ph√°p tr·ªã
window.setupHerbBarChartUI = function() {
  const select = document.getElementById("effectSelector");
  const effects = Object.keys(window.herbsByEffect || {});

  select.innerHTML = '<option value="">-- Ch·ªçn ph√°p tr·ªã --</option>';
  for (const eff of effects) {
    const option = document.createElement("option");
    option.value = eff;
    option.textContent = eff;
    select.appendChild(option);
  }

  select.addEventListener("change", () => {
    const selected = select.value;
    if (selected) {
      drawHerbBarChart(selected);
    }
  });
}

window.drawHerbBarChart = function(effect) {
  const data = window.herbsByEffect?.[effect] || [];
  const labels = data.map(d => d.vietnamese);
  const scores = data.map(d => d.score);

  const canvas = document.getElementById("herbBarChart");
  const ctx = canvas.getContext("2d");

  if (window.herbChartInstance) {
    window.herbChartInstance.destroy();
  }

  const columnWidth = 60;
  const chartWidth = Math.max(400, labels.length * columnWidth);
  canvas.removeAttribute("style");
  canvas.setAttribute("width", chartWidth);
  canvas.setAttribute("height", 300);

  const enrichedData = data.map(d => {
    const matched = window.herbalData.find(h => h.herb === d.vietnamese);
    return {
      ...d,
      tukhi: matched?.tukhi ?? null,
      sd_dose: matched?.sd_dose ?? null,
      latin: matched?.latin ?? null
    };
  });

  function tukhiToColor(tukhi) {
    if (tukhi == null) return "white";
    const colors = [
      "#2c7bb6", "#00a6ca", "#00ccbc", "#ffffbf",
      "#fdae61", "#f46d43", "#d73027"
    ];
    if (tukhi <= -3.5) return colors[0];
    if (tukhi <= -2)   return colors[1];
    if (tukhi <= -0.5) return colors[2];
    if (tukhi < 0.5)   return colors[3];
    if (tukhi < 2)     return colors[4];
    if (tukhi < 3.5)   return colors[5];
    return colors[6];
  }

  const backgroundColors = enrichedData.map(d =>
    d.tukhi == null ? "white" : tukhiToColor(d.tukhi)
  );
  const borderColors = enrichedData.map(d =>
    d.tukhi == null ? "#cccccc" : "black"
  );

  requestAnimationFrame(() => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    window.herbChartInstance = new Chart(ctx, {
      type: "bar",
      data: {
        labels: labels,
        datasets: [{
          label: "ƒêi·ªÉm m·∫°nh (score)",
          data: scores,
          backgroundColor: backgroundColors,
          borderColor: borderColors,
          borderWidth: 2,
          barThickness: 40
        }]
      },
      options: {
        responsive: false,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: { autoSkip: false },
            grid: { display: false }
          },
          y: {
            beginAtZero: true,
            grid: { display: true }
          }
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(ctx) {
                const herb = enrichedData[ctx.dataIndex];
                const latin = herb.latin || "‚Äì";
                const dose = herb.sd_dose != null ? `${herb.sd_dose}g` : "Kh√¥ng r√µ li·ªÅu";
                return `${herb.vietnamese} (${latin}):\nƒêi·ªÉm: ${herb.score}, Li·ªÅu: ${dose}`;
              }
            }
          }
        }
      }
    });
  });
}

// T·ªïng h·ª£p 6S v√† lo·∫°i tr√πng
window.renderFinalGPTFormula = function() {
  const fields = [
    "sixs-source",
    "sixs-symptom",
    "sixs-site",
    "sixs-strength",
    "sixs-sideeffect",
    "sixs-secondary"
  ];

  const herbSet = new Set();
  for (const id of fields) {
    const value = document.getElementById(id)?.value || "";
    const herbs = value.split(",").map(h => h.trim()).filter(h => h);
    herbs.forEach(h => herbSet.add(h));
  }
  const finalFormula = Array.from(herbSet).join(", ");
  const outputBox = document.getElementById("final-gpt-formula");
  if (outputBox) outputBox.value = finalFormula;
}

// L∆∞u B∆∞·ªõc 4
window.saveStep4 = function() {
  const data = JSON.parse(localStorage.getItem("currentData") || "{}");
  // Thu th·∫≠p d·ªØ li·ªáu t·ª´ c√°c √¥ 6S
  const sixs = {
    source: document.getElementById("sixs-source")?.value || "",
    symptom: document.getElementById("sixs-symptom")?.value || "",
    site: document.getElementById("sixs-site")?.value || "",
    strength: document.getElementById("sixs-strength")?.value || "",
    sideeffect: document.getElementById("sixs-sideeffect")?.value || "",
    secondary: document.getElementById("sixs-secondary")?.value || ""
  };
  // Toa thu·ªëc t·ªïng h·ª£p GPT v√† b√°c sƒ©
  const finalGPT = document.getElementById("final-gpt-formula")?.value || "";
  const finalDoctor = document.getElementById("final-doctor-formula")?.value || "";
  data.steps = data.steps || {};
  data.steps.step4 = {
    sixs: sixs,
    finalGPT: finalGPT,
    finalDoctor: finalDoctor
  };
  localStorage.setItem("currentData", JSON.stringify(data));
}
